PreEq version 0.01
=========================

Perl extension for parsing and calculating upstream preeq data

module parses DOCSIS::DOCS-IF3-MIB::docsIf3CmStatusUsEqData and calculates
taps data (re and im parts of signal, energy of signal in time domain),
stats data (MTC, NMTER, PreMTTER, PostMTTER, PPESR),
alarms and values of frequency responce data (re and im parts of signal,
energy representation of signal in frequency domain for defined algorithms)
via FFT

modules:
PreEq::EqData     - data processing, calculation and representation (text,csv)
PreEq::EqDefs     - definitions
PreEq::EqHTML     - HTML representation (as simple as possible, all browsers)
PreEq::SvgHTML    - HTML svg tag of signal in frequency domain, png exporting
PreEq::FFTWrapper - wrapper for Fourier transform, currently only pdl supported

use PreEq::EqData or PreEq::EqHTML, no need to import or use others directly

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   #make test # no tests implemented yet
   make install

DEPENDENCIES

This module requires these other modules and libraries:

  perl pdl

This extenstion does not depend on any fancy modules by purpose, only those
absolutely neccessary where used, including pdl for Fourier transform,
someday maybe other modules calculating FFT will be used (see FFTWrapper)

NOTES

This module should not be of much use for ordinary people, it's purpose is
to help in visualizing and analyzing signal distortions in return path of
DOCSIS plant, and that means it may only be of any use for people that know
what it is about.

Some aspects are covered within this documentation, for more details see
the source code. Bearing in mind that perl is mostly write-only language,
I tried to make it as readable as possible, but... well, it's perl
and nobody cares anyway.

DISCLAIMER

I'm no expert in signal processing (I know something practically, but no
no strict background theory), and I am not personally confident what
representation of signal in frequency domain would be best.
Currently implemented algorithms were requested by someone who knew what
he wanted (at least I think he did) so I happily implemeted them.
Any suggestions or basics are welcome.

COPYRIGHT AND LICENCE

Copyright (C) 2016 by Mariusz Jadczak

This library is free software; you can redistribute it and/or modify
it under the terms of BSD licence

